import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.stream.Collectors;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

public class VulnerabilityParser {

  public static List<Vulnerability> parse(String filename) {
    try {
      Object obj = new JSONParser().parse(new FileReader(filename));
      JSONObject json = (JSONObject) obj;

      String version = json.get("version").toString();

      List<Object> vulnerabilities = (List<Object>) json.get("vulnerabilities");
      List<Vulnerability> vuls = vulnerabilities.stream().map(vul -> {
        try {
          Map<Object, Object> vulMap = (Map<Object, Object>) vul;
          Map cve = (Map) vulMap.get("cve");
          Map metrics = (Map) cve.get("metrics");
          List cvssMetrics = (List) metrics.get("cvssMetricV2");
          Map cvssMetric = (Map) cvssMetrics.get(0);
          Map cvssData = (Map) cvssMetric.get("cvssData");

          // All the different applications affected: network, local, user action req, local_network

          String soft = (String) cvssMetrics.stream().map((m -> {
                Map metricMap = (Map) m;
                Map data = (Map) metricMap.get("cvssData");
                return data.get("accessVector");
              }))
              .reduce((m1, m2) -> m1 + ", " + m2).get();

          List weaknesses = (List) cve.get("weaknesses");
          String lose_types = (String) weaknesses.stream()
              .map(w -> {
                Map weaknessMap = (Map) w;
                List descList = (List) weaknessMap.get("description");
                return (String) descList.stream().map(d -> {
                  Map descMap = (Map) d;
                  return descMap.get("value");
                }).reduce((v1, v2) -> v1 + ", " + v2).get();
              })
              .reduce((v1, v2) -> v1 + ", " + v2).get();

          return new Vulnerability(cve.get("id").toString(), soft, lose_types,
              cvssData.get("baseSeverity").toString(), cvssData.get("accessComplexity").toString());
        } catch (NullPointerException | NoSuchElementException e) {
          return Vulnerability.nullVul();
        }
      }).collect(Collectors.toList());

      return vuls;
    } catch (Exception e) {
      e.printStackTrace();
      return new ArrayList<>();
    }
  }

  public static class Vulnerability {
    public String id;
    public String rge;
    public String lose_types;
    public String sev;
    public String access;

    public static Vulnerability nullVul() {
      return new Vulnerability("NULL", "", "", "", "");
    }

    public Vulnerability(String id, String rge, String lose_types, String sev, String access) {
      this.id = id;
      this.rge = rge;
      this.lose_types = lose_types;
      this.sev = sev;
      this.access = access;
    }

    @Override
    public String toString() {
      return id + " " + " [" + rge + "] " + " [" + lose_types + "] " + sev + " " + access;
    }
  }

}
