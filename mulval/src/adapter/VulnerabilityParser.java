import java.io.FileReader;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

public class VulnerabilityParser {

  public static void main(String[] args) {
    try {
      Object obj = new JSONParser().parse(new FileReader("src/main/java/mywork/vulnerabilities.json"));
      JSONObject json = (JSONObject) obj;

      String version = json.get("version").toString();

      List<Object> vulnerabilities = (List<Object>) json.get("vulnerabilities");
      List<Vulnerability> vuls = vulnerabilities.stream().map(vul -> {
        try {
          Map<Object, Object> vulMap = (Map<Object, Object>) vul;
          Map cve = (Map) vulMap.get("cve");
          Map metrics = (Map) cve.get("metrics");
          Map cvssMetric = (Map) ((List) metrics.get("cvssMetricV2")).get(0);
          Map cvssData = (Map) cvssMetric.get("cvssData");
          return new Vulnerability(cve.get("id").toString(), "", "",
              cvssData.get("baseSeverity").toString(), cvssData.get("accessComplexity").toString());
        } catch (NullPointerException e) {
          return Vulnerability.nullVul();
        }
      }).collect(Collectors.toList());

      System.out.println(vuls);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  static class Vulnerability {
    public String id;
    public String rge;
    public String lose_types;
    public String sev;
    public String access;

    public static Vulnerability nullVul() {
      return new Vulnerability("NULL", "", "", "", "");
    }

    public Vulnerability(String id, String rge, String lose_types, String sev, String access) {
      this.id = id;
      this.rge = rge;
      this.lose_types = lose_types;
      this.sev = sev;
      this.access = access;
    }

    @Override
    public String toString() {
      return id + " " + sev + " " + access;
    }
  }

}
